@import::("lexer/token.qu")
@import::("lexer/ast.qu")

struct PARSER {
    tokens: TOKEN*;
    token_count: int;
    position: int;
}

def PARSER_NEW(tokens: TOKEN*, count: int) :: PARSER {
    return PARSER {
        tokens: tokens,
        token_count: count,
        position: 0
    };
}

def current_token(parser: PARSER*) :: TOKEN* {
    if (parser.position >= parser.token_count) {
        return parser.tokens + parser.token_count - 1; // return last token (EOF)
    }
    return parser.tokens + parser.position;
}

def advance(parser: PARSER*) :: void {
    if (parser.position < parser.token_count - 1) {
        parser.position = parser.position + 1;
    }
}

def match_token(parser: PARSER*, expected_type: int) :: bool {
    let token: TOKEN* = current_token(parser);
    if (token.type == expected_type) {
        advance(parser);
        return true;
    }
    return false;
}

def parse_expression(parser: PARSER*) :: EXPR* {
    let token: TOKEN* = current_token(parser);
    
    if (token.type == TOKEN_TYPE_INT_LIT) {
        advance(parser);
        return 0 as EXPR*;
    }
    
    return 0 as EXPR*;
}

def parse_statement(parser: PARSER*) :: EXPR* {
    return parse_expression(parser);
}

def parse_program(parser: PARSER*) :: EXPR* {
    return parse_statement(parser);
}
